{
    "hints": {
        "addNFTListing(uint64,string,string,string)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getNFTListing(uint64)(string,string,string)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Listing",
                    "elements": [
                        [
                            "seller",
                            "string"
                        ],
                        [
                            "nftPrice",
                            "string"
                        ],
                        [
                            "marketplace",
                            "string"
                        ]
                    ]
                }
            }
        },
        "removeNFTListing(uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contractOptInToNFT(uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferNFTToContract(uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferNFTToReceiver(uint64,string)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferNFTToSeller(uint64,string)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferNFTToContractAndAddListing(uint64,string,string,string)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferNFTToReceiverAndRemoveListing(uint64,string,string)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferNFTToSellerAndRemoveListing(uint64,string,string)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fundContract(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawExcessFunds()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AlgoMintX",
        "methods": [
            {
                "name": "addNFTListing",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "string",
                        "name": "senderWalletAddress"
                    },
                    {
                        "type": "string",
                        "name": "nftPrice"
                    },
                    {
                        "type": "string",
                        "name": "marketplace"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                },
                "desc": "\nBox only methods"
            },
            {
                "name": "getNFTListing",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(string,string,string)"
                }
            },
            {
                "name": "removeNFTListing",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "contractOptInToNFT",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                },
                "desc": "\nNFT methods"
            },
            {
                "name": "transferNFTToContract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "transferNFTToReceiver",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "string",
                        "name": "sellerWalletAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "transferNFTToSeller",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "string",
                        "name": "sellerWalletAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "transferNFTToContractAndAddListing",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "string",
                        "name": "senderWalletAddress"
                    },
                    {
                        "type": "string",
                        "name": "nftPrice"
                    },
                    {
                        "type": "string",
                        "name": "marketplace"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                },
                "desc": "\nNFT + Box methods"
            },
            {
                "name": "transferNFTToReceiverAndRemoveListing",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "string",
                        "name": "sellerWalletAddress"
                    },
                    {
                        "type": "string",
                        "name": "marketplace"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "transferNFTToSellerAndRemoveListing",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "string",
                        "name": "sellerWalletAddress"
                    },
                    {
                        "type": "string",
                        "name": "marketplace"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "fundContract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "\nMisc methods"
            },
            {
                "name": "withdrawExcessFunds",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}